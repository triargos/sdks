/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/contactinformation/person/{personId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by Person
         * @description Find contact information by person
         */
        get: operations["findByPerson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/districts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a district by ID
         * @description Find a specific district by ID
         */
        get: operations["findDistrictById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/persons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all
         * @description Find all persons.
         */
        get: operations["findAllPersons"];
        put?: never;
        /**
         * Create
         * @description Create a person.
         */
        post: operations["createPerson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all
         * @description Find all available countries
         */
        get: operations["findAllCountries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create
         * @description Create contact information
         */
        post: operations["createContactInformation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/religions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all
         * @description Find all available religions
         */
        get: operations["findAllReligions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contact person mappings for a person
         * @description Get contact person mappings for a person
         */
        get: operations["getContactPersonMappings"];
        put?: never;
        /**
         * Create contact person mapping for a child
         * @description Create contact person mapping for a person
         */
        post: operations["createContactPersonMapping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get address by id
         * @description Get address by id
         */
        get: operations["findAddressById"];
        /**
         * Update address
         * @description Update address
         */
        put: operations["updateAddress"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/religions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by id
         * @description Find a religion by its id
         */
        get: operations["findReligionById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find group by id
         * @description Find group by id
         */
        get: operations["findGroupById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/information": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get contact information mappings for a person */
        get: operations["getContactInformationMappingsByPerson"];
        put?: never;
        /** Create contact information mapping for a person */
        post: operations["createContactInformationMapping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/contacts/{contactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete contact person mapping for a person
         * @description Delete contact person mapping for a person
         */
        delete: operations["deleteContactPersonMapping"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation/{contactInformationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by ID
         * @description Find contact information by id
         */
        get: operations["findById"];
        /**
         * Update
         * @description Update contact information
         */
        put: operations["updateContactInformation"];
        post?: never;
        /**
         * Delete
         * @description Delete contact information
         */
        delete: operations["deleteContactInformation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/information/{contactInformationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete contact information mapping for a person */
        delete: operations["deleteContactInformationMapping"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all addresses
         * @description Get all addresses
         */
        get: operations["findAllAddresses"];
        put?: never;
        /**
         * Create address
         * @description Create address
         */
        post: operations["createAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation/address/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by Address
         * @description Find contact information by address
         */
        get: operations["findByAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/persons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by id
         * @description Find a person by id.
         */
        get: operations["findPerson"];
        /**
         * Update
         * @description Update a person.
         */
        put: operations["updatePerson"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all groups
         * @description Find all groups
         */
        get: operations["findAllGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/countries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by ID
         * @description Find a country by its ID
         */
        get: operations["findCountryByIdx"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/persons/family/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by family id
         * @description Find a person by family id.
         */
        get: operations["findPersonByFamilyId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find group members by id
         * @description Find group members by id
         */
        get: operations["findGroupMembersById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/districts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all districts
         * @description Get all districts
         */
        get: operations["findAllDistricts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{id}/residents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get residents of address
         * @description Get residents of address
         */
        get: operations["findResidentsOfAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/relationships/person/{personId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get relationships for person
         * @description Get relationships for person
         */
        get: operations["findRelationshipsForPerson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDatabaseInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ContactInformationDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            order: number;
            type: string;
            medium: string;
            /** Format: int32 */
            personId: number | null;
            /** Format: int32 */
            addressId: number | null;
            externalName: string | null;
            content: string;
            comment: string | null;
            secret: boolean;
        };
        CountyDTO: {
            /** Format: int32 */
            id: number;
            name: string;
        };
        PersonCreationDTO: {
            firstName: string;
            lastName: string;
            allFirstNames: string;
            gender: string;
            /** Format: int32 */
            addressId: number | null;
            /** Format: int32 */
            familyId: number;
            familyRole: string;
            birthDate: string | null;
            birthPlace: string | null;
            /** Format: int32 */
            birthCountryId: number | null;
            /** Format: int32 */
            nationalityId: number | null;
        };
        CreationResponse: {
            /** Format: int32 */
            id: number;
            message: string;
        };
        CountryDTO: {
            /** Format: int32 */
            id: number;
            idx: string;
            iso: string;
            name: string;
        };
        ContactInformationCreationDTO: {
            type: string;
            medium: string;
            /** Format: int32 */
            personId: number | null;
            /** Format: int32 */
            addressId: number | null;
            externalName: string | null;
            content: string;
            comment: string | null;
            secret: boolean | null;
        };
        ContentDisposition: {
            type: string;
            name: string;
            filename: string;
            charset: {
                registered: boolean;
            };
            /** Format: int64 */
            size: number;
            /** Format: date-time */
            creationDate: string;
            /** Format: date-time */
            modificationDate: string;
            /** Format: date-time */
            readDate: string;
            attachment: boolean;
            formData: boolean;
            inline: boolean;
        };
        HttpHeaders: {
            contentType: components["schemas"]["MediaType"];
            /** Format: int64 */
            contentLength: number;
            /** Format: int64 */
            ifModifiedSince: number;
            /** Format: int64 */
            lastModified: number;
            connection: string[];
            /** Format: int64 */
            date: number;
            host: {
                hostString: string;
                address: {
                    loopbackAddress: boolean;
                    multicastAddress: boolean;
                    anyLocalAddress: boolean;
                    linkLocalAddress: boolean;
                    siteLocalAddress: boolean;
                    mcglobal: boolean;
                    mcnodeLocal: boolean;
                    mclinkLocal: boolean;
                    mcsiteLocal: boolean;
                    mcorgLocal: boolean;
                    canonicalHostName: string;
                    address: string[];
                    hostAddress: string;
                    hostName: string;
                };
                /** Format: int32 */
                port: number;
                unresolved: boolean;
                hostName: string;
            };
            origin: string;
            empty: boolean;
            /** Format: uri */
            location: string;
            all: {
                [key: string]: string;
            };
            acceptLanguageAsLocales: {
                language: string;
                script: string;
                country: string;
                variant: string;
                extensionKeys: string[];
                unicodeLocaleAttributes: string[];
                unicodeLocaleKeys: string[];
                iso3Language: string;
                iso3Country: string;
                displayLanguage: string;
                displayScript: string;
                displayCountry: string;
                displayVariant: string;
                displayName: string;
            }[];
            accessControlAllowCredentials: boolean;
            accessControlAllowHeaders: string[];
            accessControlAllowMethods: ("GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "TRACE")[];
            accessControlAllowOrigin: string;
            accessControlExposeHeaders: string[];
            accessControlRequestHeaders: string[];
            /** @enum {string} */
            accessControlRequestMethod: "GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "TRACE";
            acceptPatch: components["schemas"]["MediaType"][];
            accept: components["schemas"]["MediaType"][];
            acceptLanguage: {
                range: string;
                /** Format: double */
                weight: number;
            }[];
            /** Format: int64 */
            accessControlMaxAge: number;
            acceptCharset: {
                registered: boolean;
            }[];
            basicAuth: string;
            bearerAuth: string;
            contentDisposition: components["schemas"]["ContentDisposition"];
            contentLanguage: {
                language: string;
                script: string;
                country: string;
                variant: string;
                extensionKeys: string[];
                unicodeLocaleAttributes: string[];
                unicodeLocaleKeys: string[];
                iso3Language: string;
                iso3Country: string;
                displayLanguage: string;
                displayScript: string;
                displayCountry: string;
                displayVariant: string;
                displayName: string;
            };
            /** Format: int64 */
            expires: number;
            ifMatch: string[];
            ifNoneMatch: string[];
            /** Format: int64 */
            ifUnmodifiedSince: number;
            pragma: string;
            upgrade: string;
            cacheControl: string;
            etag: string;
            allow: ("GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "TRACE")[];
            range: components["schemas"]["HttpRange"][];
            vary: string[];
        } & {
            [key: string]: string[];
        };
        HttpRange: Record<string, never>;
        MediaType: {
            type: string;
            subtype: string;
            parameters: {
                [key: string]: string;
            };
            /** Format: double */
            qualityValue: number;
            wildcardType: boolean;
            wildcardSubtype: boolean;
            subtypeSuffix: string;
            charset: {
                registered: boolean;
            };
            concrete: boolean;
        };
        ResponseEntityObject: {
            headers: {
                contentType: components["schemas"]["MediaType"];
                /** Format: int64 */
                contentLength: number;
                /** Format: int64 */
                ifModifiedSince: number;
                /** Format: int64 */
                lastModified: number;
                connection: string[];
                /** Format: int64 */
                date: number;
                host: {
                    hostString: string;
                    address: {
                        loopbackAddress: boolean;
                        multicastAddress: boolean;
                        anyLocalAddress: boolean;
                        linkLocalAddress: boolean;
                        siteLocalAddress: boolean;
                        mcglobal: boolean;
                        mcnodeLocal: boolean;
                        mclinkLocal: boolean;
                        mcsiteLocal: boolean;
                        mcorgLocal: boolean;
                        canonicalHostName: string;
                        address: string[];
                        hostAddress: string;
                        hostName: string;
                    };
                    /** Format: int32 */
                    port: number;
                    unresolved: boolean;
                    hostName: string;
                };
                origin: string;
                empty: boolean;
                /** Format: uri */
                location: string;
                all: {
                    [key: string]: string;
                };
                acceptLanguageAsLocales: {
                    language: string;
                    script: string;
                    country: string;
                    variant: string;
                    extensionKeys: string[];
                    unicodeLocaleAttributes: string[];
                    unicodeLocaleKeys: string[];
                    iso3Language: string;
                    iso3Country: string;
                    displayLanguage: string;
                    displayScript: string;
                    displayCountry: string;
                    displayVariant: string;
                    displayName: string;
                }[];
                accessControlAllowCredentials: boolean;
                accessControlAllowHeaders: string[];
                accessControlAllowMethods: ("GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "TRACE")[];
                accessControlAllowOrigin: string;
                accessControlExposeHeaders: string[];
                accessControlRequestHeaders: string[];
                /** @enum {string} */
                accessControlRequestMethod: "GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "TRACE";
                acceptPatch: components["schemas"]["MediaType"][];
                accept: components["schemas"]["MediaType"][];
                acceptLanguage: {
                    range: string;
                    /** Format: double */
                    weight: number;
                }[];
                /** Format: int64 */
                accessControlMaxAge: number;
                acceptCharset: {
                    registered: boolean;
                }[];
                basicAuth: string;
                bearerAuth: string;
                contentDisposition: components["schemas"]["ContentDisposition"];
                contentLanguage: {
                    language: string;
                    script: string;
                    country: string;
                    variant: string;
                    extensionKeys: string[];
                    unicodeLocaleAttributes: string[];
                    unicodeLocaleKeys: string[];
                    iso3Language: string;
                    iso3Country: string;
                    displayLanguage: string;
                    displayScript: string;
                    displayCountry: string;
                    displayVariant: string;
                    displayName: string;
                };
                /** Format: int64 */
                expires: number;
                ifMatch: string[];
                ifNoneMatch: string[];
                /** Format: int64 */
                ifUnmodifiedSince: number;
                pragma: string;
                upgrade: string;
                cacheControl: string;
                etag: string;
                allow: ("GET" | "HEAD" | "POST" | "PUT" | "PATCH" | "DELETE" | "OPTIONS" | "TRACE")[];
                range: components["schemas"]["HttpRange"][];
                vary: string[];
            } & {
                [key: string]: string[];
            };
            body: Record<string, never>;
            /** @enum {string} */
            statusCode: "100 CONTINUE" | "101 SWITCHING_PROTOCOLS" | "102 PROCESSING" | "103 CHECKPOINT" | "200 OK" | "201 CREATED" | "202 ACCEPTED" | "203 NON_AUTHORITATIVE_INFORMATION" | "204 NO_CONTENT" | "205 RESET_CONTENT" | "206 PARTIAL_CONTENT" | "207 MULTI_STATUS" | "208 ALREADY_REPORTED" | "226 IM_USED" | "300 MULTIPLE_CHOICES" | "301 MOVED_PERMANENTLY" | "302 FOUND" | "302 MOVED_TEMPORARILY" | "303 SEE_OTHER" | "304 NOT_MODIFIED" | "305 USE_PROXY" | "307 TEMPORARY_REDIRECT" | "308 PERMANENT_REDIRECT" | "400 BAD_REQUEST" | "401 UNAUTHORIZED" | "402 PAYMENT_REQUIRED" | "403 FORBIDDEN" | "404 NOT_FOUND" | "405 METHOD_NOT_ALLOWED" | "406 NOT_ACCEPTABLE" | "407 PROXY_AUTHENTICATION_REQUIRED" | "408 REQUEST_TIMEOUT" | "409 CONFLICT" | "410 GONE" | "411 LENGTH_REQUIRED" | "412 PRECONDITION_FAILED" | "413 PAYLOAD_TOO_LARGE" | "413 REQUEST_ENTITY_TOO_LARGE" | "414 URI_TOO_LONG" | "414 REQUEST_URI_TOO_LONG" | "415 UNSUPPORTED_MEDIA_TYPE" | "416 REQUESTED_RANGE_NOT_SATISFIABLE" | "417 EXPECTATION_FAILED" | "418 I_AM_A_TEAPOT" | "419 INSUFFICIENT_SPACE_ON_RESOURCE" | "420 METHOD_FAILURE" | "421 DESTINATION_LOCKED" | "422 UNPROCESSABLE_ENTITY" | "423 LOCKED" | "424 FAILED_DEPENDENCY" | "425 TOO_EARLY" | "426 UPGRADE_REQUIRED" | "428 PRECONDITION_REQUIRED" | "429 TOO_MANY_REQUESTS" | "431 REQUEST_HEADER_FIELDS_TOO_LARGE" | "451 UNAVAILABLE_FOR_LEGAL_REASONS" | "500 INTERNAL_SERVER_ERROR" | "501 NOT_IMPLEMENTED" | "502 BAD_GATEWAY" | "503 SERVICE_UNAVAILABLE" | "504 GATEWAY_TIMEOUT" | "505 HTTP_VERSION_NOT_SUPPORTED" | "506 VARIANT_ALSO_NEGOTIATES" | "507 INSUFFICIENT_STORAGE" | "508 LOOP_DETECTED" | "509 BANDWIDTH_LIMIT_EXCEEDED" | "510 NOT_EXTENDED" | "511 NETWORK_AUTHENTICATION_REQUIRED";
            /** Format: int32 */
            statusCodeValue: number;
        };
        ReligionDTO: {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            lookupVal: number;
        };
        KommunikationKontaktpersonDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactPersonId: number;
            isEmergency: boolean;
            includeAddressOnList: boolean;
            includeHomePhoneOnList: boolean;
        };
        AddressDTO: {
            /** Format: int32 */
            id: number;
            street: string;
            /** Format: int32 */
            countryId: number | null;
            zip: string;
            city: string;
            nameline2: string | null;
            additional: string | null;
            district: string | null;
            poBoxZip: string | null;
            poBox: string | null;
            /** Format: int32 */
            countyId: number | null;
        };
        GroupDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            parentGroupId: number | null;
            name: string;
            shortName: string;
            type: string;
            grades: number[];
            schoolYear: string | null;
            additionalType: string | null;
            /** Format: int32 */
            sortKey: number;
        };
        PersonDTO: {
            /** Format: int32 */
            id: number;
            firstName: string | null;
            lastName: string | null;
            gender: string | null;
            /** Format: int32 */
            addressId: number | null;
            /** Format: int32 */
            familyId: number | null;
            familyRole: string | null;
            birthDate: string | null;
            birthPlace: string | null;
            /** Format: int32 */
            birthCountryId: number | null;
            /** Format: int32 */
            languageId: number | null;
            /** Format: int32 */
            religionId: number | null;
            allFirstNames: string | null;
            email: string | null;
            birthName: string | null;
            academicTitle: string | null;
            namePrefix: string | null;
            nobilityTitle: string | null;
            salutationA: string | null;
            salutationB: string | null;
            jobTitle: string | null;
            comment: string | null;
            /** Format: int32 */
            nationalityId: number | null;
            maritalStatus: string | null;
            deathDate: string | null;
        };
        KommunikationKontaktinfoDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactInfoId: number;
            /** Format: int32 */
            emergencyPriority: number | null;
            isOnList: boolean;
        };
        SuccessResponse: {
            /** Format: int32 */
            code: number;
            message: string;
        };
        AddressCreationDTO: {
            /** Format: int32 */
            personId: number | null;
            street: string;
            /** Format: int32 */
            countryId: number | null;
            zip: string;
            city: string;
            nameline2: string | null;
            additional: string | null;
            district: string | null;
            poBoxZip: string | null;
            poBox: string | null;
            /** Format: int32 */
            countyId: number | null;
        };
        GroupMemberDTO: {
            /** Format: int32 */
            personId: number;
            entryDate: string;
            exitDate: string | null;
            jsonData: Record<string, never>;
            /** Format: int32 */
            grade: number | null;
        };
        KommunikationKontaktInfoCreationDTO: {
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactInfoId: number;
            /** Format: int32 */
            emergencyPriority: number | null;
            isOnList: boolean | null;
        };
        PersonBezugDTO: {
            /** Format: int32 */
            personId: number;
            relationshipType: string;
            physical: boolean;
            custody: boolean;
            realParent: boolean;
            notes: string;
        };
        KommunikationKontaktpersonCreationDTO: {
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactPersonId: number;
            isEmergency: boolean;
            includeAddressOnList: boolean;
            includeHomePhoneOnList: boolean;
        };
        DatabaseInfoDTO: {
            /** Format: int32 */
            databaseVersion: number;
            /** Format: int32 */
            build: number;
            productionVersion: string;
            databaseValid: boolean;
            databaseLocked: boolean;
            nightShiftManagerRunning: boolean;
            isProduction: boolean;
            centralSqlCommandEnabled: boolean;
            lastUpdateStart: string;
            lastUpdateEnd: string;
            lastUpdateFailed: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    findByPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"][];
                };
            };
        };
    };
    findDistrictById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountyDTO"];
                };
            };
        };
    };
    findAllPersons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"][];
                };
            };
        };
    };
    createPerson: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PersonCreationDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CreationResponse"];
                };
            };
        };
    };
    findAllCountries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountryDTO"][];
                };
            };
        };
    };
    createContactInformation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContactInformationCreationDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseEntityObject"];
                };
            };
        };
    };
    findAllReligions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ReligionDTO"][];
                };
            };
        };
    };
    getContactPersonMappings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktpersonDTO"][];
                };
            };
        };
    };
    createContactPersonMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["KommunikationKontaktpersonCreationDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktpersonDTO"];
                };
            };
        };
    };
    findAddressById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"];
                };
            };
        };
    };
    updateAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddressDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"];
                };
            };
        };
    };
    findReligionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ReligionDTO"];
                };
            };
        };
    };
    findGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GroupDTO"];
                };
            };
        };
    };
    getContactInformationMappingsByPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktinfoDTO"][];
                };
            };
        };
    };
    createContactInformationMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["KommunikationKontaktInfoCreationDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktinfoDTO"];
                };
            };
        };
    };
    deleteContactPersonMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
                contactId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"];
                };
            };
        };
    };
    updateContactInformation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContactInformationDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"];
                };
            };
        };
    };
    deleteContactInformation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseEntityObject"];
                };
            };
        };
    };
    deleteContactInformationMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findAllAddresses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"][];
                };
            };
        };
    };
    createAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddressCreationDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"];
                };
            };
        };
    };
    findByAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                addressId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"][];
                };
            };
        };
    };
    findPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"];
                };
            };
        };
    };
    updatePerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PersonDTO"];
            };
        };
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    findAllGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GroupDTO"][];
                };
            };
        };
    };
    findCountryByIdx: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountryDTO"];
                };
            };
        };
    };
    findPersonByFamilyId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"][];
                };
            };
        };
    };
    findGroupMembersById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GroupMemberDTO"][];
                };
            };
        };
    };
    findAllDistricts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountyDTO"][];
                };
            };
        };
    };
    findResidentsOfAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"][];
                };
            };
        };
    };
    findRelationshipsForPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonBezugDTO"][];
                };
            };
        };
    };
    getDatabaseInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DatabaseInfoDTO"];
                };
            };
        };
    };
}
