/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/persons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by id
         * @description Find a person by id.
         */
        get: operations["findPerson"];
        /**
         * Update
         * @description Update a person.
         */
        put: operations["updatePerson"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/followups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find follow-up by id */
        get: operations["findById"];
        /** Update follow-up */
        put: operations["update"];
        post?: never;
        /** Delete follow-up */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation/{contactInformationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by ID
         * @description Find contact information by id
         */
        get: operations["findById_1"];
        /**
         * Update
         * @description Update contact information
         */
        put: operations["updateContactInformation"];
        post?: never;
        /**
         * Delete
         * @description Delete contact information
         */
        delete: operations["deleteContactInformation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get address by id
         * @description Get address by id
         */
        get: operations["findAddressById"];
        /**
         * Update address
         * @description Update address
         */
        put: operations["updateAddress"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/absences/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get absence by id
         * @description Get absence by id
         */
        get: operations["findAbsenceById"];
        /**
         * Update absence
         * @description Update absence
         */
        put: operations["updateAbsence"];
        post?: never;
        /**
         * Delete absence
         * @description Delete absence
         */
        delete: operations["deleteAbsence"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/persons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all
         * @description Find all persons.
         */
        get: operations["findAllPersons"];
        put?: never;
        /**
         * Create
         * @description Create a person.
         */
        post: operations["createPerson"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/followups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all follow-ups
         * @description Get all follow-ups
         */
        get: operations["findAllFollowUps"];
        put?: never;
        /**
         * Create follow-up
         * @description Create follow-up
         */
        post: operations["createFollowUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create
         * @description Create contact information
         */
        post: operations["createContactInformation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/information": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get contact information mappings for a person */
        get: operations["getContactInformationMappingsByPerson"];
        put?: never;
        /** Create contact information mapping for a person */
        post: operations["createContactInformationMapping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contact person mappings for a person
         * @description Get contact person mappings for a person
         */
        get: operations["getContactPersonMappings"];
        put?: never;
        /**
         * Create contact person mapping for a child
         * @description Create contact person mapping for a person
         */
        post: operations["createContactPersonMapping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all addresses
         * @description Get all addresses
         */
        get: operations["findAllAddresses"];
        put?: never;
        /**
         * Create address
         * @description Create address
         */
        post: operations["createAddress"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/absences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all absences
         * @description Get all absences
         */
        get: operations["findAllAbsences"];
        put?: never;
        /**
         * Create absence
         * @description Create absence
         */
        post: operations["createAbsence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/religions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all
         * @description Find all available religions
         */
        get: operations["findAllReligions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/religions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by id
         * @description Find a religion by its id
         */
        get: operations["findReligionById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/relationships/person/{personId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get relationships for person
         * @description Get relationships for person
         */
        get: operations["findRelationshipsForPerson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/persons/family/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by family id
         * @description Find a person by family id.
         */
        get: operations["findPersonByFamilyId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/transition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Uebertritt */
        get: operations["getTransition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/special-support": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_SonderFoerderung */
        get: operations["getSpecialSupport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/school": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Schulen */
        get: operations["getSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/school-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Schulart */
        get: operations["getSchoolType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/school-graduation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Schulabschluss */
        get: operations["getSchoolGraduation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/repetition-reason": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Wiederholungsgrund */
        get: operations["getRepetitionReason"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/relocation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Zuzug */
        get: operations["getRelocation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/religious-education": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Religionsunterricht */
        get: operations["getReligiousEducation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/religion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Bekenntnis */
        get: operations["getReligion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/previous-school": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_SchuleVorEintritt */
        get: operations["getPreviousSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/person-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Personentyp */
        get: operations["getPersonType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/origin-grade-level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_JahrgangsstufeHerkunft */
        get: operations["getOriginGradeLevel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/municipality": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Gemeinden */
        get: operations["getMunicipality"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/municipality-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Gemeindekennziffer */
        get: operations["getMunicipalityCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/guest-student-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_GastschuelerArt */
        get: operations["getGuestStudentType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/grade-level": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Jahrgangsstufe */
        get: operations["getGradeLevel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/foreign-language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Fremdsprache */
        get: operations["getForeignLanguage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/exit-reason": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Austrittsgrund */
        get: operations["getResignationReason"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/enrollment-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Einschulungsart */
        get: operations["getEnrollmentType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/disorder-weakness": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_StoerungSchwaeche */
        get: operations["getDisorderWeakness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/departure-reason": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Abgangsgrund */
        get: operations["getExitReason"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/cost-bearer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Kostentraeger */
        get: operations["getCostBearer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/compulsory-education": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Schulpflicht */
        get: operations["getCompulsoryEducation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/common-language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Verkehrssprache */
        get: operations["getCommonLanguage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/class-goal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Klasseziel */
        get: operations["getClassGoal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/care": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Betreuung */
        get: operations["getCare"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/care-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Betreuungsform */
        get: operations["getCareType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/bavarian-schools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_SchulenBayern */
        get: operations["getBavarianSchool"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lookups/admission-authorization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns results from Lookup_Aufnahmeberechtigung */
        get: operations["getAdmissionAuthorization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDatabaseInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all groups
         * @description Find all groups
         */
        get: operations["findAllGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find group by id
         * @description Find group by id
         */
        get: operations["findGroupById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/udfs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get allowed UDFs for group
         * @description Get allowed UDFs for group
         */
        get: operations["getAllowedUdfs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find group members by id
         * @description Find group members by id
         */
        get: operations["findGroupMembersById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/followups/persons/{personId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find follow-ups that are referenced to a person */
        get: operations["findForPerson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/followups/assignees/{personId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find follow-ups for assignee */
        get: operations["findForAssignee"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/districts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all districts
         * @description Get all districts
         */
        get: operations["findAllDistricts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/districts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a district by ID
         * @description Find a specific district by ID
         */
        get: operations["findDistrictById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/countries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all
         * @description Find all available countries
         */
        get: operations["findAllCountries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/countries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by ID
         * @description Find a country by its ID
         */
        get: operations["findCountryByIdx"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation/person": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find all
         * @description Find all contact information
         */
        get: operations["findAllContactInformation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation/person/{personId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by Person
         * @description Find contact information by person
         */
        get: operations["findByPerson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contactinformation/address/{addressId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find by Address
         * @description Find contact information by address
         */
        get: operations["findByAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/addresses/{id}/residents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get residents of address
         * @description Get residents of address
         */
        get: operations["findResidentsOfAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/absences/person/{personId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get absences by person
         * @description Get absences by person
         */
        get: operations["findAbsencesByPerson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/absences/group/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get absences by group
         * @description Get absences by group
         */
        get: operations["findAbsencesByGroup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/information/{contactInformationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete contact information mapping for a person */
        delete: operations["deleteContactInformationMapping"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/communication/person/{personId}/contacts/{contactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete contact person mapping for a person
         * @description Delete contact person mapping for a person
         */
        delete: operations["deleteContactPersonMapping"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PersonDTO: {
            /** Format: int32 */
            id: number;
            firstName: string | null;
            lastName: string | null;
            gender: string | null;
            /** Format: int32 */
            addressId: number | null;
            /** Format: int32 */
            familyId: number | null;
            familyRole: string | null;
            birthDate: string | null;
            birthPlace: string | null;
            /** Format: int32 */
            birthCountryId: number | null;
            /** Format: int32 */
            languageId: number | null;
            /** Format: int32 */
            religionId: number | null;
            allFirstNames: string | null;
            email: string | null;
            birthName: string | null;
            academicTitle: string | null;
            namePrefix: string | null;
            nobilityTitle: string | null;
            salutationA: string | null;
            salutationB: string | null;
            jobTitle: string | null;
            comment: string | null;
            /** Format: int32 */
            nationalityId: number | null;
            maritalStatus: string | null;
            deathDate: string | null;
        };
        SuccessResponse: {
            /** Format: int32 */
            code: number;
            message: string;
        };
        FollowUpDTO: {
            /** Format: int32 */
            id: number;
            /** @example 2024-12-09T23:00:00Z */
            dueDate: string;
            /** Format: int32 */
            assignedPersonId: number | null;
            subject: string;
            message: string;
            /** Format: int32 */
            referencedPersonId: number | null;
            referencedFile: string | null;
            completed: boolean;
        };
        ContactInformationDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            order: number;
            type: string;
            medium: string;
            /** Format: int32 */
            personId: number | null;
            /** Format: int32 */
            addressId: number | null;
            externalName: string | null;
            content: string;
            comment: string | null;
            secret: boolean;
        };
        AddressDTO: {
            /** Format: int32 */
            id: number;
            street: string;
            /** Format: int32 */
            countryId: number | null;
            zip: string;
            city: string;
            nameline2: string | null;
            additional: string | null;
            district: string | null;
            poBoxZip: string | null;
            poBox: string | null;
            /** Format: int32 */
            countyId: number | null;
        };
        AbsenceDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            personId: number;
            /** @example 2024-12-09T23:00:00Z */
            date: string;
            excused: boolean;
            parentsInformed: boolean;
            /** @example This is a note */
            note: string | null;
            /** @example 2024-12-09T23:00:00Z */
            medicalCertificateReceived: string | null;
            /** @example 2024-12-09T23:00:00Z */
            medicalCertificateRequested: string | null;
            medicalCertificateRequired: boolean;
        };
        PersonCreationDTO: {
            firstName: string;
            lastName: string;
            allFirstNames: string;
            gender: string;
            /** Format: int32 */
            addressId: number | null;
            /** Format: int32 */
            familyId: number;
            familyRole: string;
            birthDate: string | null;
            birthPlace: string | null;
            /** Format: int32 */
            birthCountryId: number | null;
            /** Format: int32 */
            nationalityId: number | null;
        };
        CreationResponse: {
            /** Format: int32 */
            id: number;
            message: string;
        };
        FollowUpCreationDTO: {
            /** @example 2024-12-09T23:00:00Z */
            dueDate: string;
            /** Format: int32 */
            assignedPersonId: number;
            subject: string;
            message: string;
            /** Format: int32 */
            referencedPersonId: number | null;
            referencedFile: string | null;
            completed: boolean;
        };
        ContactInformationCreationDTO: {
            type: string;
            medium: string;
            /** Format: int32 */
            personId: number | null;
            /** Format: int32 */
            addressId: number | null;
            externalName: string | null;
            content: string;
            comment: string | null;
            secret: boolean | null;
        };
        KommunikationKontaktInfoCreationDTO: {
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactInfoId: number;
            /** Format: int32 */
            emergencyPriority: number | null;
            isOnList: boolean | null;
        };
        KommunikationKontaktinfoDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactInfoId: number;
            /** Format: int32 */
            emergencyPriority: number | null;
            isOnList: boolean;
        };
        KommunikationKontaktpersonCreationDTO: {
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactPersonId: number;
            isEmergency: boolean;
            includeAddressOnList: boolean;
            includeHomePhoneOnList: boolean;
        };
        KommunikationKontaktpersonDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            personId: number;
            /** Format: int32 */
            contactPersonId: number;
            isEmergency: boolean;
            includeAddressOnList: boolean;
            includeHomePhoneOnList: boolean;
        };
        AddressCreationDTO: {
            /** Format: int32 */
            personId: number | null;
            street: string;
            /** Format: int32 */
            countryId: number | null;
            zip: string;
            city: string;
            nameline2: string | null;
            additional: string | null;
            district: string | null;
            poBoxZip: string | null;
            poBox: string | null;
            /** Format: int32 */
            countyId: number | null;
        };
        CreateAbsenceDTO: {
            /** Format: int32 */
            personId: number;
            startDate: string;
            endDate: string;
            includeWeekend: boolean;
            excused: boolean;
            parentsInformed: boolean;
            note: string;
            medicalCertificateReceived: string;
            medicalCertificateRequested: string;
            medicalCertificateRequired: boolean;
        };
        ReligionDTO: {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            lookupVal: number;
        };
        PersonBezugDTO: {
            /** Format: int32 */
            personId: number;
            relationshipType: string;
            physical: boolean;
            custody: boolean;
            realParent: boolean;
            notes: string;
        };
        GenericLookupDTO: {
            /** Format: int32 */
            id: number;
            label: string;
            value: string;
        };
        SchoolDTO: {
            /** Format: int32 */
            id: number;
            label: string;
            value: string;
            /** Format: int32 */
            schoolTypeId: number;
        };
        MunicipalityDTO: {
            /** Format: int32 */
            id: number;
            label: string;
            municipalityCode: string;
            street: string | null;
            city: string | null;
            postalCode: string | null;
        };
        MunicipalityCodeDTO: {
            /** Format: int32 */
            id: number;
            label: string;
            value: string;
            postalCodes: string[];
            asvIds: string[];
        };
        CostBearerDTO: {
            /** Format: int32 */
            id: number;
            label: string;
            value: string;
            characteristic: string;
            identificationNumber: string;
        };
        CareTypeDTO: {
            /** Format: int32 */
            id: number;
            label: string;
            value: string;
            factor: string;
            description: string;
        };
        BavarianSchoolDTO: {
            /** Format: int32 */
            id: number;
            label: string;
            value: string;
            /**
             * @description Type of school in Bavaria
             * @example GY
             * @enum {string}
             */
            schoolType: "GY" | "RS" | "GMS" | "FS" | "BS" | "BFS" | "FOS" | "BOS" | "IGS" | "WS" | "FZ";
            street: string;
            building: string;
            city: string;
            postalCode: string;
        };
        DatabaseInfoDTO: {
            /** Format: int32 */
            databaseVersion: number;
            /** Format: int32 */
            build: number;
            productionVersion: string;
            databaseValid: boolean;
            databaseLocked: boolean;
            nightShiftManagerRunning: boolean;
            isProduction: boolean;
            centralSqlCommandEnabled: boolean;
            lastUpdateStart: string;
            lastUpdateEnd: string;
            lastUpdateFailed: string;
        };
        GroupDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            parentGroupId: number | null;
            name: string;
            shortName: string;
            type: string;
            grades: number[];
            schoolYear: string | null;
            additionalType: string | null;
            /** Format: int32 */
            sortKey: number;
        };
        GroupUdfDTO: {
            /** Format: int32 */
            id: number;
            /** Format: int32 */
            groupId: number;
            groupType: string;
            groupBaseType: string;
            name: string;
            /**
             * @description The type of the field, e.g. 'text', 'number', 'date', etc.
             * @enum {string}
             */
            fieldType: "audit" | "selection" | "date" | "function" | "long" | "currency" | "hierarchyId" | "boolean" | "json" | "float" | "memo" | "password" | "requestKey" | "sessionKey" | "storedProcedure" | "table" | "foreignKey" | "idArray" | "text" | "view" | "valueSelection";
            /**
             * @description Where the UDF is used, e.g 'person', 'address
             * @enum {string}
             */
            usage: "address" | "group" | "person" | "groupMember";
            learning: boolean;
            referenceTable: string | null;
            description: string | null;
            active: boolean;
            /** Format: int32 */
            sortIndex: number;
        };
        GroupMemberDTO: {
            /** Format: int32 */
            personId: number;
            entryDate: string;
            exitDate: string | null;
            jsonData: Record<string, never>;
            /** Format: int32 */
            grade: number | null;
        };
        CountyDTO: {
            /** Format: int32 */
            id: number;
            name: string;
        };
        CountryDTO: {
            /** Format: int32 */
            id: number;
            idx: string;
            iso: string;
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    findPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"];
                };
            };
        };
    };
    updatePerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SuccessResponse"];
                };
            };
        };
    };
    findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FollowUpDTO"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FollowUpDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FollowUpDTO"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findById_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"];
                };
            };
        };
    };
    updateContactInformation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactInformationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"];
                };
            };
        };
    };
    deleteContactInformation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    findAddressById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"];
                };
            };
        };
    };
    updateAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"];
                };
            };
        };
    };
    findAbsenceById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AbsenceDTO"];
                };
            };
        };
    };
    updateAbsence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AbsenceDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AbsenceDTO"];
                };
            };
        };
    };
    deleteAbsence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findAllPersons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"][];
                };
            };
        };
    };
    createPerson: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonCreationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CreationResponse"];
                };
            };
        };
    };
    findAllFollowUps: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FollowUpDTO"][];
                };
            };
        };
    };
    createFollowUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FollowUpCreationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FollowUpDTO"];
                };
            };
        };
    };
    createContactInformation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContactInformationCreationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getContactInformationMappingsByPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktinfoDTO"][];
                };
            };
        };
    };
    createContactInformationMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KommunikationKontaktInfoCreationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktinfoDTO"];
                };
            };
        };
    };
    getContactPersonMappings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktpersonDTO"][];
                };
            };
        };
    };
    createContactPersonMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KommunikationKontaktpersonCreationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["KommunikationKontaktpersonDTO"];
                };
            };
        };
    };
    findAllAddresses: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"][];
                };
            };
        };
    };
    createAddress: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddressCreationDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AddressDTO"];
                };
            };
        };
    };
    findAllAbsences: {
        parameters: {
            query?: {
                /** @description Type of absence query */
                type?: "all" | "today" | "schoolyear";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AbsenceDTO"][];
                };
            };
        };
    };
    createAbsence: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAbsenceDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AbsenceDTO"];
                };
            };
        };
    };
    findAllReligions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ReligionDTO"][];
                };
            };
        };
    };
    findReligionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ReligionDTO"];
                };
            };
        };
    };
    findRelationshipsForPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonBezugDTO"][];
                };
            };
        };
    };
    findPersonByFamilyId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"][];
                };
            };
        };
    };
    getTransition: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getSpecialSupport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getSchool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SchoolDTO"][];
                };
            };
        };
    };
    getSchoolType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getSchoolGraduation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getRepetitionReason: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getRelocation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getReligiousEducation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getReligion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getPreviousSchool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getPersonType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getOriginGradeLevel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getMunicipality: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MunicipalityDTO"][];
                };
            };
        };
    };
    getMunicipalityCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MunicipalityCodeDTO"][];
                };
            };
        };
    };
    getGuestStudentType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getGradeLevel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getForeignLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getResignationReason: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getEnrollmentType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getDisorderWeakness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getExitReason: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getCostBearer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CostBearerDTO"][];
                };
            };
        };
    };
    getCompulsoryEducation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getCommonLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getClassGoal: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getCare: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getCareType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CareTypeDTO"][];
                };
            };
        };
    };
    getBavarianSchool: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BavarianSchoolDTO"][];
                };
            };
        };
    };
    getAdmissionAuthorization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GenericLookupDTO"][];
                };
            };
        };
    };
    getDatabaseInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DatabaseInfoDTO"];
                };
            };
        };
    };
    findAllGroups: {
        parameters: {
            query?: {
                memberId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GroupDTO"][];
                };
            };
        };
    };
    findGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GroupDTO"];
                };
            };
        };
    };
    getAllowedUdfs: {
        parameters: {
            query?: {
                includeParentGroups?: boolean;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GroupUdfDTO"][];
                };
            };
        };
    };
    findGroupMembersById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GroupMemberDTO"][];
                };
            };
        };
    };
    findForPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FollowUpDTO"][];
                };
            };
        };
    };
    findForAssignee: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FollowUpDTO"][];
                };
            };
        };
    };
    findAllDistricts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountyDTO"][];
                };
            };
        };
    };
    findDistrictById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountyDTO"];
                };
            };
        };
    };
    findAllCountries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountryDTO"][];
                };
            };
        };
    };
    findCountryByIdx: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["CountryDTO"];
                };
            };
        };
    };
    findAllContactInformation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"][];
                };
            };
        };
    };
    findByPerson: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"][];
                };
            };
        };
    };
    findByAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                addressId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ContactInformationDTO"][];
                };
            };
        };
    };
    findResidentsOfAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PersonDTO"][];
                };
            };
        };
    };
    findAbsencesByPerson: {
        parameters: {
            query?: {
                /** @description Type of absence query */
                type?: "all" | "today" | "schoolyear";
            };
            header?: never;
            path: {
                personId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AbsenceDTO"][];
                };
            };
        };
    };
    findAbsencesByGroup: {
        parameters: {
            query?: {
                /** @description Type of absence query */
                type?: "all" | "today" | "schoolyear";
            };
            header?: never;
            path: {
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["AbsenceDTO"][];
                };
            };
        };
    };
    deleteContactInformationMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
                contactInformationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContactPersonMapping: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                personId: number;
                contactId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
